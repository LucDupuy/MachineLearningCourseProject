----------------NUMBERS FOR BATCH SIZE OF 16------------------------
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16*103*114, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(16, 16*103*114)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

    85936 training images


If it crashes on the last iteration, it means the total number of iterations is not a whole number. Even if its printing
that it is, check the length of the train_set, you might need to add or subtract an image or two.


----------------NUMBERS FOR BATCH SIZE OF 32------------------------
[batch_size = 32, channels = 16, h=240, w=424]




(Conv -> Relu -> Conv -> Relu -> Pool)^+ FC







TO DO
******

Add a validating set and do predictions


VALID CODE
************
https://www.youtube.com/watch?v=zFA8Cm13Xmk




# add reference for CustomDataset.py



def validate(model, validloader, criterion):

    # can save model parameters so you don't go through them again to save time
    optimizer = optim.SGD(model.parameters(), lr=learning_rate, momentum=momentum)

    valid_loss = 0
    accuracy   = 0

    for images, labels in iter(validloader):
        images = images.to(device)
        labels = labels.to(device)

        output = model.forward(images)
        valid_loss += criterion(output, labels).item()

        probabilities = torch.exp(output)

        equality = labels.data == probabilities.max(dim=1)[1]
        accuracy += equality.type(torch.FloatTensor).mean()


    return valid_loss, accuracy



